!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
WORKER_THREAD_NUM	c++11_version/reactor.h	13;"	d
WORKER_THREAD_NUM	normal_version/reactor.cpp	22;"	d	file:
__MYREACTOR_H__	c++11_version/reactor.h	5;"	d
accept_thread_func	normal_version/reactor.cpp	/^void* accept_thread_func(void* arg)$/;"	f
create_server_listener	normal_version/reactor.cpp	/^bool create_server_listener(const char* ip, short port)$/;"	f
daemon_run	normal_version/reactor.cpp	/^void daemon_run()$/;"	f
g_acceptcond	normal_version/reactor.cpp	/^pthread_cond_t g_acceptcond;$/;"	v
g_acceptmutex	normal_version/reactor.cpp	/^pthread_mutex_t g_acceptmutex;$/;"	v
g_acceptthreadid	normal_version/reactor.cpp	/^pthread_t g_acceptthreadid = 0;$/;"	v
g_bstop	normal_version/reactor.cpp	/^bool g_bstop = false;$/;"	v
g_clientmutex	normal_version/reactor.cpp	/^pthread_mutex_t g_clientmutex;$/;"	v
g_cond	normal_version/reactor.cpp	/^pthread_cond_t g_cond;$/;"	v
g_epollfd	normal_version/reactor.cpp	/^int g_epollfd = 0;$/;"	v
g_listclients	normal_version/reactor.cpp	/^std::list<int>  g_listclients;$/;"	v
g_listenfd	normal_version/reactor.cpp	/^int g_listenfd = 0;$/;"	v
g_mutex	normal_version/reactor.cpp	/^pthread_mutex_t g_mutex;$/;"	v
g_threadid	normal_version/reactor.cpp	/^pthread_t g_threadid[WORKER_THREAD_NUM] = {0};$/;"	v
init	c++11_version/reactor.cpp	/^bool myreactor::init(const char* ip, short port)$/;"	f	class:myreactor
m_acceptcond	c++11_version/reactor.h	/^    std::condition_variable         m_acceptcond;$/;"	m	class:myreactor
m_acceptmutex	c++11_version/reactor.h	/^    std::mutex                      m_acceptmutex;$/;"	m	class:myreactor
m_acceptthread	c++11_version/reactor.h	/^    std::shared_ptr<std::thread>    m_acceptthread;$/;"	m	class:myreactor
m_bstop	c++11_version/reactor.h	/^    bool                    m_bstop = false;$/;"	m	class:myreactor
m_epollfd	c++11_version/reactor.h	/^    int                     m_epollfd = 0;$/;"	m	class:myreactor
m_listclients	c++11_version/reactor.h	/^    std::list<int>                  m_listclients;$/;"	m	class:myreactor
m_listenfd	c++11_version/reactor.h	/^    int                     m_listenfd = 0;$/;"	m	class:myreactor
m_woekercond	c++11_version/reactor.h	/^    std::condition_variable         m_woekercond;$/;"	m	class:myreactor
m_workermutex	c++11_version/reactor.h	/^    std::mutex                      m_workermutex;$/;"	m	class:myreactor
m_workerthreads	c++11_version/reactor.h	/^    std::shared_ptr<std::thread>    m_workerthreads[WORKER_THREAD_NUM];$/;"	m	class:myreactor
main	normal_version/reactor.cpp	/^int main(int argc, char* argv[])$/;"	f
min	c++11_version/reactor.cpp	20;"	d	file:
min	normal_version/reactor.cpp	24;"	d	file:
myreactor	c++11_version/reactor.cpp	/^myreactor::myreactor()$/;"	f	class:myreactor
myreactor	c++11_version/reactor.h	/^class myreactor {$/;"	c
prog_exit	normal_version/reactor.cpp	/^void prog_exit(int signo)$/;"	f
release_client	normal_version/reactor.cpp	/^void release_client(int clientfd)$/;"	f
uninit	c++11_version/reactor.cpp	/^bool myreactor::uninit()$/;"	f	class:myreactor
worker_thread_func	normal_version/reactor.cpp	/^void* worker_thread_func(void* arg)$/;"	f
~myreactor	c++11_version/reactor.cpp	/^myreactor::~myreactor()$/;"	f	class:myreactor
